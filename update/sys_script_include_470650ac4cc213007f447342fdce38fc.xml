<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_root_library.UtilsLibrary</api_name>
        <client_callable>false</client_callable>
        <description>General utilities to suport client and server side needs</description>
        <name>UtilsLibrary</name>
        <script><![CDATA[var UtilsLibrary = Class.create();
UtilsLibrary.prototype = {
	initialize: function() {
	},
	
	parseAndWriteLog : function(logJSON) {
		this[logJSON.type](logJSON.message, logJSON.valueList, logJSON.location);
		
		// alternate call:
		// this.log(logJSON.message, logJSON.valueList, logJSON.location, logJSON.type);
	},
	
	info : function(message, valueList, location) {
		this.log(message, valueList, location, 'info');
	},
	error : function(message, valueList, location) {
		this.log(message, valueList, location, 'error');
	},
	warn : function(message, valueList, location) {
		this.log(message, valueList, location, 'warn');
	},
	log : function(message, valueList, location, type) {
		var debug = gs.getProperty('x_snc_root_library.utilslibrary.debug', 'false') == 'true';
		if (debug || type == 'error') {
			if (!message || !location) {
				throw 'ERROR: no message or location given - UtilsLibrary.log';
			}
			if (!type) {
				type = 'info';
			}
			if (valueList == null) {
				valueList = [];
			}

			message = '---> [' + new GlideDateTime().getNumericValue() + '-' + location + ']\n'
				+ message;

			gs[type](message, valueList);
		}
	},
	
	toObject : function(recordToPackage, getValue) {
		var packageToSend = {};
		
		if (gs.nil(getValue)) {
			getValue = false;
		}
		
		for (var property in recordToPackage) {
			try {
				var internalType = this.getFieldInfo(recordToPackage[property]).internalType;
				
				// I am not particularly fond of the com.glide.vars2.variable
				// check as this is the type assigned to ALL variable types 
				// from current.variables.
				if (getValue && 
					(internalType == 'reference' 
					 || internalType == 'com.glide.vars2.variable'
					 || internalType == 'password2'
					)) {
					packageToSend[property] = recordToPackage[property];
				}
				else if (!gs.nil(recordToPackage[property])) {
					if (internalType == 'password2') {
						packageToSend[property] = recordToPackage[property];
					}
					else {
						packageToSend[property] = recordToPackage[property].getDisplayValue().trim();
					}
				}
				else {
					packageToSend[property] = '';
				}
			}
			catch(err){
				this.error('ERROR: {0}', [err], 'SI: ' + this.type + '.toObject');
			}
		}

		return packageToSend;
	},
	
	toObjectList : function(recordsToPackage, getValue) {
		if (gs.nil(getValue)) {
			getValue = false;
		}

		var objectList = [];

		// loop through all the records and create the object array
		while (recordsToPackage.next()) {
			this.toObject(recordsToPackage, getValue);
			objectList.push(record);
		}

		return objectList;
	},
	
	listFactory : function(tableName, limit, order, encodedQuery) {
		var listRecords = new GlideRecord(tableName);

		try {
			if (!gs.nil(encodedQuery)) {
				listRecords.addEncodedQuery(encodedQuery);
			}
			if (!gs.nil(order)) {
				if (order.type == 'descending') {
					listRecords.orderByDesc(order.field);
				}
				else {
					listRecords.orderBy(order.field);
				}
			}
			
			listRecords.setLimit(limit);
			listRecords.query();
			
			if (listRecords.hasNext() && limit == 1) {
				listRecords.next();
			}
		}
		catch(err) {
			throw err;
		}
		
		return listRecords;
	},
	
	// for debugging - return one record from the given table, encodedQuery is optional
	currentFactory : function(tableName, order, encodedQuery) {
		return this.listFactory(tableName, 1, order, encodedQuery);
	},
	
	toBoolean : function(item) {
		if (!this.has(item))
			return false;

		if (typeof item == 'boolean')
			return item;

		if (typeof item == 'number')
			return item != 0;

		if ((typeof item == 'string') || ((typeof item == 'object') && (item instanceof String))) {			
			return item.toLowerCase() == 'true';
		}

		return true;
	},
	type: 'UtilsLibrary'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-05-09 23:32:45</sys_created_on>
        <sys_id>470650ac4cc213007f447342fdce38fc</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>UtilsLibrary</sys_name>
        <sys_package display_value="Root Library" source="x_snc_root_library">c1a4186c4cc213007f447342fdce3800</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Root Library">c1a4186c4cc213007f447342fdce3800</sys_scope>
        <sys_update_name>sys_script_include_470650ac4cc213007f447342fdce38fc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-10 00:40:03</sys_updated_on>
    </sys_script_include>
</record_update>
